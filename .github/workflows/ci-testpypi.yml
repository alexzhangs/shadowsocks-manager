name: ci-testpypi
on:
  push:
    paths:
      - '.github/workflows/ci-testpypi.yml'
      - 'pyproject.toml'
  workflow_run:
    workflows: ["ci-unittest"]
    types:
      - completed
env:
  TWINE_USERNAME: __token__
  TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
jobs:
  get-new-version:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    outputs:
      new_version: ${{ steps.new-version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get new version
        id: new-version
        run: |
          python -c "
          import configparser, datetime
          config = configparser.ConfigParser()
          config.read('pyproject.toml')
          version = config.get('project', 'version')
          major, minor, patch = version.split('.')
          suffix = 'dev-' + datetime.datetime.now().strftime('%Y%m%d%H%M')
          new_version = '{0}.{1}.{2}.{3}'.format(major, minor, patch, suffix)
          print('::set-output name=new_version::' + new_version)
          "

  testpypi-py3-build-and-upload:
    runs-on: ubuntu-latest
    needs: get-new-version
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12.3']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install build twine
      - name: Set new version
        run: |
          python -c "
          import configparser
          config = configparser.ConfigParser()
          new_version = '${{ needs.get-new-version.outputs.new_version }}'
          config.set('metadata', 'version', new_version)
          with open('setup.cfg', 'w') as f:
              config.write(f)
          "
      - name: Build source and binary distributions
        run: python -m build
      - name: Upload to TestPyPI
        run: twine upload --repository testpypi dist/*

  testpypi-py3-install:
    runs-on: ubuntu-latest
    needs: [get-new-version, testpypi-py3-build-and-upload]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12.3']
    env:
      NEW_VERSION: ${{ needs.get-new-version.outputs.new_version }}
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install --upgrade pip
      - name: Install from binary distribution
        env:
          PIP_INDEX_URL: https://test.pypi.org/simple/
        run: |
          pip install --no-deps --only-binary shadowsocks-manager shadowsocks-manager==${{ env.NEW_VERSION }}
      - name: Clean up for installing source distribution
        run: |
          pip uninstall -y shadowsocks-manager
      - name: Install from source distribution with PEP 517 required
        env:
          PIP_INDEX_URL: https://test.pypi.org/simple/
        run: |
          pip install --use-pep517 --no-deps --no-binary shadowsocks-manager shadowsocks-manager==${{ env.NEW_VERSION }}

  testpypi-py2-install:
    runs-on: ubuntu-latest
    needs: [get-new-version, testpypi-py3-build-and-upload]
    container:
      image: python:2.7
    env:
      NEW_VERSION: ${{ needs.get-new-version.outputs.new_version }}
    steps:
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools wheel
      - name: Install from binary distribution
        env:
          PIP_INDEX_URL: https://test.pypi.org/simple/
        run: |
          pip install --no-deps --only-binary shadowsocks-manager shadowsocks-manager==${{ env.NEW_VERSION }}
      - name: Clean up for install source distribution
        run: |
          pip uninstall -y shadowsocks-manager
      - name: Install from source distribution with setuptools and wheel required
        env:
          PIP_INDEX_URL: https://test.pypi.org/simple/
        run: |
          pip install --no-deps --no-binary --no-build-isolation shadowsocks-manager shadowsocks-manager==${{ env.NEW_VERSION }}
