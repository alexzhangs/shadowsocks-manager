# The following environment variables are optional for runing the testenv:py{37,38,39,310,311,312}:
#   SSM_TEST_CACHES_BACKEND
#   SSM_TEST_MEMCACHED_PORT
#   SSM_TEST_RABBITMQ_PORT
#   SSM_TEST_SS_MGR_PRIVATE_IP
#   SSM_TEST_SS_MGR_PORT
#   SSM_TEST_SS_PORT_BEGIN
#   SSM_TEST_SS_PORT_END
#
# The following environment variables are optional for running the testenv:dev:
#   SSM_DEV_CACHES_BACKEND
#   SSM_DEV_MEMCACHED_PORT
#   SSM_DEV_RABBITMQ_PORT
#   SSM_DEV_SS_MGR_PRIVATE_IP
#   SSM_DEV_SS_MGR_PORT
#   SSM_DEV_SS_PORT_BEGIN
#   SSM_DEV_SS_PORT_END
#   SSM_DEV_CELERY_LOG_LEVEL
#
# The following environment variables are required for running the testenv:codecov:
#   CODECOV_TOKEN
#
# The following environment variables are required for running the testenv:act-ci-unittest:
#   GITHUB_PAT_PUB_RO
#   CODECOV_TOKEN
#   PRIVATE_IP
#
# The following environment variables are optional for running the testenv:bar and testenv:bar-mp:
#   DOCKER_BUILD_ARGS_PROXY
#   SSM_DEV_BAR_OPTIONS
#   SSM_DEV_DOCKER_RUN_CMD_OPTIONS
#   SSM_DEV_BAR_MP_OPTIONS
#
# For discovering the Python versions managed by pyenv, it requires:
#   pip install virtualenv-pyenv
#   export VIRTUALENV_DISCOVERY=pyenv

[tox]
envlist =
    py{38,39,310,311,312},
    cov,codecov,pypi,act-ci-unittest,bar,dev

[testenv]
description = Set up the test environment without running the test under {envname}
package = editable
extras = test
allowlist_externals = docker, test, bash
set_env =
    DOCKER_SS_IMAGE = shadowsocks/shadowsocks-libev:edge
    DOCKER_SS_ENTRYPOINT_CMD = ss-manager --manager-address 0.0.0.0:6001 --executable /usr/local/bin/ss-server -m aes-256-gcm -s 0.0.0.0 -u
    DOCKER_CLEANUP_CMD = docker rm -fv ssm-{envname}-memcached ssm-{envname}-rabbitmq ssm-{envname}-ss-libev-localhost ssm-{envname}-ss-libev-private
commands_pre =
    test -n CACHES_BACKEND -a -n "{env:CACHES_BACKEND}"
    test -n MEMCACHED_PORT -a -n "{env:MEMCACHED_PORT}"
    test -n RABBITMQ_PORT -a -n "{env:RABBITMQ_PORT}"
    test -n SS_MGR_PORT -a -n "{env:SS_MGR_PORT}"
    test -n SS_PORTS -a -n "{env:SS_PORTS}"
    - {env:DOCKER_CLEANUP_CMD}
    docker run -d -p {env:MEMCACHED_PORT}:11211 --name ssm-{envname}-memcached memcached
    docker run -d -p {env:RABBITMQ_PORT}:5672 --name ssm-{envname}-rabbitmq rabbitmq
    docker run -d -p 127.0.0.1:{env:SS_MGR_PORT}:6001/UDP \
        -p 127.0.0.1:{env:SS_PORTS}:{env:SS_PORTS}/UDP -p 127.0.0.1:{env:SS_PORTS}:{env:SS_PORTS} \
        --name ssm-{envname}-ss-libev-localhost {env:DOCKER_SS_IMAGE} {env:DOCKER_SS_ENTRYPOINT_CMD}
    bash -c 'echo tox env: SSM_TEST_SS_MGR_PRIVATE_IP={env:SSM_TEST_SS_MGR_PRIVATE_IP}'
    bash -c 'echo shell env: SSM_TEST_SS_MGR_PRIVATE_IP=${SSM_TEST_SS_MGR_PRIVATE_IP}'
    bash -c 'test -z "${SSM_TEST_SS_MGR_PRIVATE_IP}" && SSM_TEST_SS_MGR_PRIVATE_IP=$(ipconfig getifaddr en0 2>/dev/null || hostname -i | cut -d " " -f1 2>/dev/null); \
        docker run -d -p ${SSM_TEST_SS_MGR_PRIVATE_IP}:{env:SS_MGR_PORT}:6001/UDP \
            -p ${SSM_TEST_SS_MGR_PRIVATE_IP}:{env:SS_PORTS}:{env:SS_PORTS}/UDP -p ${SSM_TEST_SS_MGR_PRIVATE_IP}:{env:SS_PORTS}:{env:SS_PORTS} \
            --name ssm-{envname}-ss-libev-private {env:DOCKER_SS_IMAGE} {env:DOCKER_SS_ENTRYPOINT_CMD}'
    bash -c 'echo tox env: SSM_DATA_HOME={env:SSM_DATA_HOME}'
    bash -c 'echo shell env: SSM_DATA_HOME=${SSM_DATA_HOME}'
    docker ps --all --filter name=ssm-{envname}
    ssm-setup -e SSM_CACHES_BACKEND={env:CACHES_BACKEND} -e SSM_MEMCACHED_PORT={env:MEMCACHED_PORT} -e SSM_RABBITMQ_PORT={env:RABBITMQ_PORT} -m
commands =
    python -m pip list --format=columns
    python -c 'print(r"{envpython}")'
commands_post =
    - {env:DOCKER_CLEANUP_CMD}

[testenv:py{37,38,39,310,311,312}]
description = Run the test with Django test and coverage under {envname}
pass_env =
    SSM_TEST_CACHES_BACKEND
    SSM_TEST_MEMCACHED_PORT
    SSM_TEST_RABBITMQ_PORT
    SSM_TEST_SS_MGR_PRIVATE_IP
    SSM_TEST_SS_MGR_PORT
    SSM_TEST_SS_PORT_BEGIN
    SSM_TEST_SS_PORT_END
set_env =
    {[testenv]set_env}
    SSM_DATA_HOME = {envtmpdir}/ssm-data-home
    SSM_TEST_SS_MGR_LOCALHOST = 1
    SSM_TEST_SS_MGR_PRIVATE = 1
    SSM_TEST_SS_MGR_PORT = {env:SSM_TEST_SS_MGR_PORT:6002}
    SSM_TEST_SS_PORT_BEGIN = {env:SSM_TEST_SS_PORT_BEGIN:8391}
    SSM_TEST_SS_PORT_END = {env:SSM_TEST_SS_PORT_END:8395}
    CACHES_BACKEND = {env:SSM_TEST_CACHES_BACKEND:memcached.MemcachedCache}
    MEMCACHED_PORT = {env:SSM_TEST_MEMCACHED_PORT:11212}
    RABBITMQ_PORT = {env:SSM_TEST_RABBITMQ_PORT:5673}
    SS_MGR_PORT = {env:SSM_TEST_SS_MGR_PORT:6002}
    SS_PORTS={env:SSM_TEST_SS_PORT_BEGIN:8391}-{env:SSM_TEST_SS_PORT_END:8395}
    COVERAGE_PROCESS_START = {toxinidir}{/}pyproject.toml
    COVERAGE_FILE = {toxworkdir}{/}.coverage.{envname}
commands =
    {[testenv]commands}
    bash -c 'test -n "{env:COVERAGE_FILE}" && rm -f {env:COVERAGE_FILE}.*'
    coverage run shadowsocks_manager/manage.py test {posargs: --no-input -t .}

# virtualenv 20.22.0 dropped support for all Python versions smaller or equal to Python 3.6.
# For running the test with Python 2.7, it requires:
#   pip install 'virtualenv<20.22.0' tox
[testenv:py27]
description = Run the test with Django test and coverage under {envname} ('virtualenv<20.22.0' required)
package = editable-legacy  # this is the reason to separate the Python 2.7 environment
pass_env =
    SSM_TEST_CACHES_BACKEND
    SSM_TEST_MEMCACHED_PORT
    SSM_TEST_RABBITMQ_PORT
    SSM_TEST_SS_MGR_PRIVATE_IP
    SSM_TEST_SS_MGR_PORT
    SSM_TEST_SS_PORT_BEGIN
    SSM_TEST_SS_PORT_END
set_env =
    {[testenv]set_env}
    SSM_DATA_HOME = {envtmpdir}/ssm-data-home
    SSM_TEST_SS_MGR_LOCALHOST = 1
    SSM_TEST_SS_MGR_PRIVATE = 1
    SSM_TEST_SS_MGR_PORT = {env:SSM_TEST_SS_MGR_PORT:6002}
    SSM_TEST_SS_PORT_BEGIN = {env:SSM_TEST_SS_PORT_BEGIN:8391}
    SSM_TEST_SS_PORT_END = {env:SSM_TEST_SS_PORT_END:8395}
    CACHES_BACKEND = {env:SSM_TEST_CACHES_BACKEND:memcached.MemcachedCache}
    MEMCACHED_PORT = {env:SSM_TEST_MEMCACHED_PORT:11212}
    RABBITMQ_PORT = {env:SSM_TEST_RABBITMQ_PORT:5673}
    SS_MGR_PORT = {env:SSM_TEST_SS_MGR_PORT:6002}
    SS_PORTS={env:SSM_TEST_SS_PORT_BEGIN:8391}-{env:SSM_TEST_SS_PORT_END:8395}
    COVERAGE_PROCESS_START = {toxinidir}{/}pyproject.toml
    COVERAGE_FILE = {toxworkdir}{/}.coverage.{envname}
commands =
    {[testenv]commands}
    bash -c 'test -n "{env:COVERAGE_FILE}" && rm -f {env:COVERAGE_FILE}.*'
    coverage run shadowsocks_manager/manage.py test {posargs: --no-input -t shadowsocks_manager shadowsocks_manager}

[testenv:cov]
description = Combine coverage data and generate the coverage report
base = None
skip_install = true
deps =
    coverage
set_env =
    COVERAGE_PROCESS_START = {toxinidir}{/}pyproject.toml
    COVERAGE_COMBINE_DIR = {toxworkdir}
    COVERAGE_FILE = {toxinidir}{/}.coverage
    COVERAGE_XML_FILE = {toxinidir}{/}coverage.xml
    COVERAGE_HTML_DIR = {toxinidir}{/}htmlcov
commands =
    coverage erase
    coverage combine {env:COVERAGE_COMBINE_DIR}
    coverage xml -o {env:COVERAGE_XML_FILE}
    coverage html -d {env:COVERAGE_HTML_DIR}
    coverage report

[testenv:codecov]
description = Upload coverage XML report to codecov
base = cov
deps =
    codecov
pass_env =
    CODECOV_TOKEN
commands =
    codecov {posargs: --file {env:COVERAGE_XML_FILE}}

[testenv:pypi]
description = Build the PyPI package
base = None
skip_install = true
deps =
    build
    twine
commands =
    python -m build
    twine check dist/*

[testenv:act-ci-unittest]
description = Run the GitHub workflow ci-unittest locally (docker, act required)
base = None
skip_install = true
allowlist_externals = act
pass_env =
    GITHUB_PAT_PUB_RO
    CODECOV_TOKEN
    PRIVATE_IP
commands =
    act workflow_dispatch \                                         # override the default push event to bypass the RUN_HISTORY check
        --platform ubuntu-latest=catthehacker/ubuntu:gh-latest \    # custom the image which is close enough to the GitHub Actions environment
        --container-architecture=linux/amd64 \                      # use this for the M serials chip Mac
        --workflows .github/workflows/ci-unittest.yml \             # run all jobs in the ci-unittest workflow
        --artifact-server-path /tmp/act \                           # artifact server is used in the workflows
        --secret GITHUB_TOKEN={env:GITHUB_PAT_PUB_RO} \             # used by check-run-history job
        --secret CODECOV_TOKEN={env:CODECOV_TOKEN} \                # used to upload coverage report to codecov
        --env SSM_TEST_SS_MGR_PRIVATE_IP={env:PRIVATE_IP} \         # pass the host IP address to tox, since the containers created by act container are actually running on the host
        {posargs: --matrix python-version:3.12}                     # run single matrix to avoid the port conflict

[testenv:bar]
description = Build the Docker images and run the containers (docker required)
base = None
skip_install = true
allowlist_externals = docker, bash
pass_env =
    DOCKER_BUILD_ARGS_PROXY  # e.g: '--build-arg https_proxy=http://host.docker.internal:1086'
    SSM_DEV_BAR_OPTIONS
    SSM_DEV_DOCKER_RUN_CMD_OPTIONS
commands =
    bash docker-build-and-run.sh {posargs: {env:SSM_DEV_BAR_OPTIONS} -- {env:SSM_DEV_DOCKER_RUN_CMD_OPTIONS}}

[testenv:bar-mp]
description = Build the Docker images with multi-platform enabled and run the containers (docker required)
base = bar
pass_env =
    {[testenv:bar]pass_env}
    SSM_DEV_BAR_MP_OPTIONS
commands_pre =
    bash -c 'if ! docker buildx inspect desktop-linux-mp >/dev/null 2>&1; then docker buildx create --name desktop-linux-mp --driver docker-container; fi; docker buildx inspect desktop-linux-mp --bootstrap; docker buildx use desktop-linux-mp'
commands =
    bash docker-build-and-run.sh {posargs: {env:SSM_DEV_BAR_MP_OPTIONS:-m} -- {env:SSM_DEV_DOCKER_RUN_CMD_OPTIONS}}
commands_post =
    docker buildx use desktop-linux

[testenv:dev]
description = Run django server and celery in DEV environment with all dependencies at {envdir}
extras =
    test
    release
pass_env =
    SSM_DEV_CACHES_BACKEND
    SSM_DEV_MEMCACHED_PORT
    SSM_DEV_RABBITMQ_PORT
    SSM_DEV_SS_MGR_PRIVATE_IP
    SSM_DEV_SS_MGR_PORT
    SSM_DEV_SS_PORT_BEGIN
    SSM_DEV_SS_PORT_END
    SSM_DEV_CELERY_LOG_LEVEL
set_env =
    {[testenv]set_env}
    CACHES_BACKEND = {env:SSM_DEV_CACHES_BACKEND:memcached.MemcachedCache}
    MEMCACHED_PORT = {env:SSM_DEV_MEMCACHED_PORT:11211}
    RABBITMQ_PORT = {env:SSM_DEV_RABBITMQ_PORT:5672}
    SS_MGR_PORT = {env:SSM_DEV_SS_MGR_PORT:6001}
    SS_PORTS={env:SSM_DEV_SS_PORT_BEGIN:8381}-{env:SSM_DEV_SS_PORT_END:8385}
commands =
    {[testenv]commands}
    ssm-setup {posargs: -cl -u admin -p passw0rd -r {env:SSM_DEV_SS_PORT_BEGIN:8381} -R {env:SSM_DEV_SS_PORT_END:8385}}
    ssm-dev-start
